#!/bin/sh

function show_help() {
	printf "\nUSAGE: flac-rip [options] input_directory output_directory\n\n"
	printf "OPTIONS:\n"
	printf " -h, --help              Show help\n"
	printf " -f, --force             Overwrite output files\n"
	printf " -a, --artist-name <arg> The artist name to append to the output:\n"
	printf "                           \"<output-directory>/<artist-name>/<album-name>\"\n"
	printf " -l, --album-name <arg>  The album name to append to the output:\n"
	printf "                           \"<output-directory>/<artist-name>/<album-name>\"\n"
	printf " -d, --disc-number <arg> The disc number to prepend to the output track name:\n"
	printf "                           \"<disc-number>-<track-number>-<track-name>\"\n"
}

function required_error() {
	printf "${RED}ERROR:${NC} %s requires a non-empty option argument.\n" "$1" >&2
	exit 1
}


RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

_arguments=("-f" "--force" "-a" "--artist-name" "-l" "--album-name" "-d" "--disc-number")
_arg_force=0
_arg_artist_name=''
_arg_album_name=''
_arg_disc_number=0
_arg_input_directory=''
_arg_output_directory=''

echo

while :; do
	case $1 in
		-h|--help)
		show_help
		exit
		;;
	-f|--force)
		_arg_force=1
		;;
	-a|--artist-name|--artist-name=*)
		if [ ${1%=*} == "--artist-name" ]; then
			_arg_artist_name=${1#*=}
		else
			if [[ " ${_arguments[@]} " =~ " $2 " ]]; then
				required_error "-a, --artist-name"
			else
				_arg_artist_name=$2
				shift
			fi
		fi

		if [ -z "$_arg_artist_name" ]; then required_error "-a, --artist-name"; fi
		;;
	-l|--album-name|--album-name=*)
		if [ ${1%=*} == "--artist-name" ]; then
			_arg_album_name=${1#*=}
		else
			if [[ " ${_arguments[@]} " =~ " $2 " ]]; then
				required_error "-l, --album-name"
			else
				_arg_album_name=$2
				shift
			fi
		fi

		if [ -z "$_arg_album_name" ]; then required_error "-l, --album-name"; fi
		;;
	-d|--disc-number|--disc-number=*)
		if [ ${1%=*} == "--artist-name" ]; then
			_arg_disc_number=${1#*=}
		else
			if [[ " ${_arguments[@]} " =~ " $2 " ]]; then
				required_error "-d, --disc-number"
			else
				_arg_disc_number=$2
				shift
			fi
		fi

		if [ -z "$_arg_disc_number" ]; then required_error "-d, --disc-number"; fi
		;;
	-?*)
		printf "${YELLOW}WARN:${NC} Unknown option (ignored): %s\n" "$1" >&2
		;;
	*)
		if [ -z "$_arg_input_directory" -a "$#" -gt 0 ]; then _arg_input_directory=${1%%+(/)}; shift; continue; fi
		if [ -z "$_arg_output_directory" -a "$#" -gt 0 ]; then _arg_output_directory=${1%%+(/)}; shift; continue; fi
		break
	esac

	shift
done

# TODO Use input directory? these should be positional.
if [ -z "$_arg_artist_name" ]; then required_error "-a, --artist-name"; fi
if [ -z "$_arg_album_name" ]; then required_error "-l, --album-name"; fi

if [ ! -d "$_arg_input_directory" ]; then printf "${RED}ERROR:${NC} Input directory doesn't exist.\n" >&2; exit 1; fi
if [ ! -d "$_arg_output_directory" ]; then printf "${RED}ERROR:${NC} Output directory doesn't exist.\n" >&2; exit 1; fi

shopt -s extglob
_arg_input_directory="$(cd "$_arg_input_directory" 2> /dev/null && pwd -P)"
_arg_output_directory="$(cd "$_arg_output_directory" 2> /dev/null && pwd -P)/$_arg_artist_name/$_arg_album_name"

if [ ! -d "$_arg_output_directory" ]; then
	printf "${GREEN}INFO:${NC} Creating artist/album directory %s\n" "$_arg_output_directory"
	mkdir -p "$_arg_output_directory"
fi

input_files=()
while read -r line; do
	input_files+=("$line")
done <<< "$(for file in "$_arg_input_directory"/*.aiff; do basename "$file"; done | sort -n)"


track_names=()
IFS=$'\n' read -d '' -r -a track_names < "${HOME}/etc/flac-rip"
if [ "${#input_files[@]}" -ne "${#track_names[@]}" ]; then
	printf "${RED}ERROR:${NC} Number of track file names is not the same as the number of tracks.\n" >&2;
	exit 1
fi

output_files=()
for i in "${!input_files[@]}"; do
	basefilename=$(basename "${input_files[$i]}" .aiff)
	trackname="${track_names[$i]}"
	tracknumber=$(printf "%02d\n" ${basefilename%% *})

	if [ "$_arg_disc_number" -eq 0 ]; then
		output_files+=("$tracknumber $trackname.flac")
	else
		output_files+=("$_arg_disc_number-$tracknumber $trackname.flac")
	fi
done

force=''
if [ "$_arg_force" -eq 0 ]; then
	for output_file in "${output_files[@]}"; do
		if [ -f "$_arg_output_directory/$output_file" ]; then
			printf "${RED}ERROR:${NC} One or more output files already exist.\n" >&2
			exit 1
		fi
	done
else
	force='-f'
fi

for i in "${!input_files[@]}"; do
	input_file="$_arg_input_directory/${input_files[$i]}"
	output_file="$_arg_output_directory/${output_files[$i]}"
	printf "\n${GREEN}INFO:${NC} Ripping %s to %s\n" "$input_file" "$output_file"
	flac ${force} --force-raw-format --endian=little --sign=signed --channels=2 --sample-rate=44100 --bps=16 --skip=20 --output-name="$output_file" "$input_file"
	flacreturn=$?
	retry=1
	while [ $flacreturn -ne 0 -a $retry -lt 3 ]; do
		printf "\n${RED}ERROR:${NC} Flac rip failed, retry ${retry} of 3.\n" >&2
		printf "\n${GREEN}INFO:${NC} Ripping %s to %s\n" "$input_file" "$output_file"
		flac ${force} --force-raw-format --endian=little --sign=signed --channels=2 --sample-rate=44100 --bps=16 --skip=20 --output-name="$output_file" "$input_file"
		flacreturn=$?
		((retry++))
	done

	if [ $flacreturn -ne 0 ]; then
		printf "\n${RED}ERROR:${NC} Flac rip failed, retried too many times. Exiting...\n" >&2
		exit 1
	fi
done

printf "\n${GREEN}INFO:${NC} Done.\n"
